require 'movement.rb'

grammar VimGrammar

  rule vi_command
    count_command vi_command / 
    insert_mode vi_command / 
    movement vi_command / 
    tok_dd vi_command / 
    empty
  end

  rule insert_mode
    insert_command text+ escape_command
  end

  rule insert_command
    insert / append # O/o
  end

  rule insert
    i / shift_i
  end

  rule append
    a / shift_a
  end

  rule countable_command
    movement
  end

  rule movement
    down / up / left / right
  end

  rule escape_command
    '<ESC>' {
      def to_s
        'leave insert mode'
      end
    }
  end

  rule i
    'i' {
      def to_s
        'enter insert mode (i)'
      end
    }
  end

  rule shift_i
    'I' {
      def to_s
        'enter insert at ^ (I)'
      end
    }
  end

  rule a
    'a' {
      def to_s
        'enter insert with append (a)'
      end
    }
  end

  rule shift_a
    'A' {
      def to_s
        'enter insert mode at $ (A)'
      end
    }
  end

  rule count_command
    (count:digit+ command:countable_command) {
      def to_s
        command.to_s + count.to_s
      end
    }
  end

  rule digit
    [0-9] {
      def to_s
        "#{text_value} times"
      end
    }
  end


  rule tok_dd
    'dd' {
      def to_s 
        "delete line"
      end

      def eval
        to_s
      end
    }
  end

  rule down
    'j' <Movement>
  end

  rule up
    'k' <Movement>
  end

  rule left
    'h' <Movement>
  end

  rule right
    'l' <Movement>
  end

  rule empty
    '' {
      def eval
        nil
      end

      def to_s
        "Ïµ"
      end
    }
  end

  rule text
    [a-z] {
      def to_s
        text_value
      end
    }
  end

  rule space 
    ' '*
  end

end
